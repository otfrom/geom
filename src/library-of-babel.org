#+SETUPFILE: setup.org

* The thing-geom Library of Babel

This file contains shared and configurable code templates for various
protocol implementations, which only require minor changes for
different types.

Some types also make use of more type specific templates, however
these are defined in their own =.org= files. The template names
defined here are all using the prefix =lob= to clearly differentiate
them from other templates.

** Master template builder

#+NAME: lob-geom-tpl
#+BEGIN_SRC emacs-lisp :var bindings=nil :var src=""
  (reduce
   (lambda (acc p)
     (replace-regexp-in-string
      (concat "{{" (car p) "}}") (car (cdr p)) acc))
   bindings :initial-value src)
#+END_SRC

** PArea (zero)

#+NAME: lob-geom-zeroarea
#+BEGIN_SRC clojure
  g/PArea
  (area [_] 0.0)
#+END_SRC

** PBounds

#+NAME: lob-geom-bounds
#+BEGIN_SRC emacs-lisp :var fn="" :var depth="no"
  (let ((body (replace-regexp-in-string "{{fn}}" fn
  "g/PBounds
  (bounds [_] ({{fn}} (:points _)))
  (width [_] (gu/axis-range 0 (:points _)))
  (height [_] (gu/axis-range 1 (:points _)))")))
    (if (string= "yes" depth)
      (concat body "\n(depth [_] (gu/axis-range 2 (:points _)))")
      (concat body "\n(depth [_] 0)")))
#+END_SRC

** PBoundingCircle

#+NAME: lob-geom-bcircle
#+BEGIN_SRC clojure
  g/PBoundingCircle
  (bounding-circle
   [_] (tu/bounding-circle (g/centroid _) (:points _)))
#+END_SRC

** PBoundingSphere

#+NAME: lob-geom-bsphere
#+BEGIN_SRC clojure
  g/PBoundingSphere
  (bounding-sphere
   [_] (tu/bounding-sphere (g/centroid _) (:points _)))
#+END_SRC

** PCenter

#+NAME: lob-geom-center
#+BEGIN_SRC emacs-lisp :var type="" :var vtype=""
  (replace-regexp-in-string
   "{{vtype}}" vtype
   (replace-regexp-in-string
    "{{type}}" type
    "g/PCenter
  (center
   ([_] ({{type}}. (gu/center ({{vtype}}) (:points _))))
   ([_ o] ({{type}}. (gu/center (g/centroid _) ({{vtype}} o) (:points _)))))"))
#+END_SRC

** PCircumference

#+NAME: lob-geom-circum
#+BEGIN_SRC clojure
  g/PCircumference
  (circumference
   [{p :points}] (gu/arc-length (conj p (first p))))
#+END_SRC

** PFlip

#+NAME: lob-geom-flip
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PFlip
  (flip
   [_] ({{type}}. (into (empty (:points _)) (reverse (:points _)))))")
#+END_SRC

** PPolygonConvert

#+NAME: lob-geom-as-polygon
#+BEGIN_SRC clojure
  g/PPolygonConvert
  (as-polygon
   [_] (thi.ng.geom.types.Polygon2. (:points _)))
#+END_SRC

** PProximity

#+NAME: lob-geom-proxi
#+BEGIN_SRC clojure
  g/PProximity
  (closest-point
   [_ p]
   (first (gu/closest-point-on-segments p (g/edges _))))
#+END_SRC

** PRotate

#+NAME: lob-geom-rotate
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PRotate
  (rotate
   [_ theta]
   ({{type}}. (mapv #(g/rotate % theta) (:points _))))")
#+END_SRC

** PRotate3D

#+NAME: lob-geom-rotate3d
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PRotate3D
  (rotate-x
   [_ theta]
   ({{type}}. (mapv #(g/rotate-x % theta) (:points _))))
  (rotate-y
   [_ theta]
   ({{type}}. (mapv #(g/rotate-y % theta) (:points _))))
  (rotate-z
   [_ theta]
   ({{type}}. (mapv #(g/rotate-z % theta) (:points _))))
  (rotate-around-axis
   [_ axis theta]
   ({{type}}.
    (mapv #(g/rotate-around-axis % axis theta) (:points _))))")
#+END_SRC

** PSample

#+NAME: lob-geom-sample
#+BEGIN_SRC emacs-lisp :var n="3"
  (replace-regexp-in-string "{{n}}" n
  "g/PSample
  (point-at
   [{p :points} t] (gu/point-at t (conj p (first p))))
  (random-point
   [{p :points}] (gu/point-at (m/random) (conj p (first p))))
  (random-point-inside
   [_] (gu/from-barycentric (:points _) (m/normdist-weights {{n}})))
  (sample-uniform
   [{p :points} udist include-last?]
   (gu/sample-uniform udist include-last? (conj p (first p))))")
#+END_SRC

** PScale

#+NAME: lob-geom-scale
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PScale
  (scale
   ([_ s]
      ({{type}}. (mapv #(g/* % s) (:points _))))
   ([_ sx sy]
      ({{type}}. (mapv #(g/* % sx sy) (:points _))))
   ([_ sx sy sz]
      ({{type}}. (mapv #(g/* % sx sy sz) (:points _)))))
  (scale-size
   [_ s] ({{type}}. (gu/scale-size s (:points _))))")
#+END_SRC

** PTranslate

#+NAME: lob-geom-translate
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PTranslate
  (translate
   [_ t]
   ({{type}}. (mapv #(g/+ % t) (:points _))))")
#+END_SRC

** PTransform

#+NAME: lob-geom-tx
#+BEGIN_SRC emacs-lisp :var type=""
  (replace-regexp-in-string "{{type}}" type
  "g/PTransform
  (transform
   [_ m]
   ({{type}}. (mapv #(g/transform-vector m %) (:points _))))")
#+END_SRC

** PVolume (zero)

#+NAME: lob-geom-zerovol
#+BEGIN_SRC clojure
  g/PVolume
  (volume [_] 0.0)
#+END_SRC
